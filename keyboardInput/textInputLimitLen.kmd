KMD
00000000: EA000009    ;                 B main
00000004: 0000000C    ; width   DEFW 12
00000008:             ; 
00000008:             ; 
00000008: 30 31 32 33 ; buffer  DEFB "01234567890123456789012345678901",0
0000000C: 34 35 36 37 ; 
00000010: 38 39 30 31 ; 
00000014: 32 33 34 35 ; 
00000018: 36 37 38 39 ; 
0000001C: 30 31 32 33 ; 
00000020: 34 35 36 37 ; 
00000024: 38 39 30 31 ; 
00000028: 00          ; 
00000029:             ; 
0000002C:             ;                 ALIGN
0000002C:             ; main
0000002C:             ; ;8 bytes of memory available
0000002C:             ; ;********************************************************
0000002C:             ; ;BRANCH-RET     ;COMMAND        ;ACTION         ;COMMENTS
0000002C:             ; ;--------------------------------------------------------
0000002C:             ;                 ;BL ruleIn
0000002C:             ;                 
0000002C:             ;         ;initialising registers
0000002C:             ; 
0000002C: E3A03000    ;                 MOV R3,#0                       ;STORE Register 2 ==> space counter (tik-tok)
00000030: E3A0A000    ;                 MOV R10,#0
00000034: E3A02000    ;                 MOV R2,#0
00000038: E3A04000    ;                 MOV R4,#0                       ;R4 tracks the length of a word
0000003C: E3A0B000    ;                 MOV R11,#0                      ;initialise pointer to start of buffer
00000040: E51F5044    ;                 LDR R5,width
00000044: E1A06005    ;                 MOV R6,R5
00000048: E2866001    ;                 ADD R6,R6,#1
0000004C:             ; start
0000004C:             ; 
0000004C:             ; ;FIX: if linecount is 0 and backspace then RESTART
0000004C:             ; ;ISSUE: NEED to fix printing newline before a word greater than 13
0000004C:             ; ;ISSUE: with the space, R3 updating and not branching correctly in space function
0000004C:             ; ;ISSUE: with ^L printing at the begining of some text, figure out why...
0000004C:             ; ;ISSUE: when line > limit, doesnt print new line (carriage return does work)
0000004C:             ; 
0000004C:             ; 
0000004C:             ; 
0000004C:             ;                                                         ;SCAN input
0000004C:             ;         
0000004C:             ;         ;initialising registers
0000004C:             ;         
0000004C: E1A01000    ;                 MOV R1,R0                       ;STORE Register 1
00000050: E3A08000    ;                 MOV R8,#0
00000054: E24F8054    ;                 ADR R8,buffer
00000058:             ;                 
00000058: EB000011    ;                 BL inStore                      ;CAPTURE keyboard input and store, analyse len
0000005C: EB000053    ;                 BL read                         ;can be called by other loops (move R14 to R13 
                      ; and back)
00000060: EAFFFFF9    ;                 B start 
00000064:             ; 
00000064: EAFFFFFF    ;                 B end                           ;BRANCH
00000068:             ; 
00000068: EF000002    ; end             SWI 2
0000006C:             ; 
0000006C:             ; ;*********************************************
0000006C:             ; ;               PROGRAM END
0000006C:             ; ;*********************************************
0000006C:             ;                                                         ;<Rdest>,[<Rbase>],<Roffset>
0000006C:             ; 
0000006C:             ; ;                FUNCTIONS
0000006C:             ; ;               ***********
0000006C:             ; 
0000006C:             ;                 ;INSTORE-------
0000006C:             ; carReset        ;MOV R0,#10
0000006C:             ;                 ;MOV R2,#0
0000006C:             ;                 ;MOV R3,#0
0000006C:             ;                 ;MOV R10,#0
0000006C:             ;                 ;MOV R4,#0
0000006C: E3A07001    ;                 MOV R7,#1
00000070: E3A0C000    ;                 MOV R12,#0
00000074: EA00003E    ;                 B carCont
00000078:             ; 
00000078: E3500008    ; bsCheck CMP R0,#8
0000007C: 0A000000    ;                 BEQ bsCheckCont
00000080: EA00002D    ;                 B bsCont
00000084:             ; 
00000084: E3A00020    ; bsCheckCont     MOV R0,#32
00000088: EF000000    ;                 SWI 0
0000008C: EA000017    ;                 B storeCond
00000090:             ; 
00000090:             ; 
00000090:             ; 
00000090: E3510020    ; multiCheck      CMP R1,#32
00000094: 0A00000A    ;                 BEQ bypMulti
00000098: E351000A    ;                 CMP R1,#10
0000009C: 0A000008    ;                 BEQ bypMulti
000000A0: EA000003    ;                 B noMulti
000000A4:             ;                                                                         ;while loop which copys
                      ;  into register location + wordLen
000000A4: E1A0B008    ; inStore         MOV R11,R8
000000A8: E28AA001    ;                 ADD R10,R10,#1                          ;counts calls to BL read per line
000000AC: E2833001    ;                 ADD R3,R3,#1
000000B0: EA00000E    ;                 B storeCond
000000B4:             ; noMulti
000000B4: E1A00001    ; loopStore       MOV R0,R1                               ;shift back R0
000000B8: E5E80001    ;                 STRB R0,[R8,#1]!                        ;loop   ;reg-shift compensation require
                      ; d
000000BC: E2822001    ;                 ADD R2,R2,#1
000000C0: E2844001    ;                 ADD R4,R4,#1
000000C4:             ; 
000000C4: E3500023    ; bypMulti        CMP R0,#35
000000C8: 0A000074    ;                 BEQ hashCq
000000CC: E2899001    ;                 ADD R9,R9,#1
000000D0: EA000006    ;                 B storeCond     ;BRANCH
000000D4:             ; 
000000D4: E3A0C000    ; resetR12        MOV R12,#0
000000D8: EA000011    ;                 B R2cont
000000DC: E24CC002    ; backSub SUB R12,R12,#2
000000E0: E2422002    ;                 SUB R2,R2,#2
000000E4: EA000007    ;                 B subCont
000000E8:             ; 
000000E8: E3A0C000    ; res             MOV R12,#0
000000EC: EA00000F    ;                 B resCont
000000F0:             ; 
000000F0:             ; 
000000F0:             ; 
000000F0: EF000001    ; storeCond       SWI 1
000000F4: E28CC001    ;                 ADD R12,R12,#1
000000F8: E3500023    ;                 CMP R0,#35
000000FC: 0AFFFFD9    ;                 BEQ end
00000100: E3500008    ;                 CMP R0,#8
00000104: 0AFFFFF4    ;                 BEQ backSub
00000108: EF000000    ; subCont         SWI 0
0000010C: E3520000    ;                 CMP R2,#0
00000110: 0AFFFFD8    ;                 BEQ bsCheck                                     ;if R2 (lineLen) < 1, disallow 
                      ; SWI 0
00000114: E1A01000    ;                 MOV R1,R0
00000118: E1A0D00E    ;                 MOV R13,R14
0000011C: E35C000C    ;                 CMP R12,#12
00000120: CAFFFFEB    ;                 BGT resetR12
00000124: EB00007B    ; R2cont          BL rubOut                               ;R0, returns number of chars been delet
                      ; ed
00000128: E35C000B    ;                 CMP R12,#11
0000012C: AAFFFFED    ;                 BGE res
00000130:             ; resCont
00000130: E1A0E00D    ;                 MOV R14,R13
00000134: E1A0A000    ;                 MOV R10,R0                                      ;shift return value (chars to d
                      ; elete to R10), as per brief
00000138: E1A00001    ;                 MOV R0,R1                                       ;return original R0 value
0000013C:             ; bsCont
0000013C: E1A01000    ;                 MOV R1,R0                                       ;shift away R0 for comparison
00000140: E1A09008    ;                 MOV R9,R8
00000144: E4590001    ;                 LDRB R0,[R9],#-1
00000148: E1500001    ;                 CMP R0,R1                                       ;R0 is old value, R1, new value
0000014C: 0AFFFFCF    ;                 BEQ multiCheck
00000150: E1A00001    ;                 MOV R0,R1
00000154: E350000A    ;                 CMP R0,#10
00000158: 0AFFFFC3    ;                 BEQ carReset            
0000015C: E3500020    ;                 CMP R0,#32                                      ;conditionals   ;R4 = #32 (spac
                      ; e)
00000160: 1AFFFFD3    ;                 BNE loopStore                           ;BRANCH
00000164: E3A0C000    ;                 MOV R12,#0
00000168: E2822001    ;                 ADD R2,R2,#1
0000016C: E1520006    ;                 CMP R2,R6
00000170: 0A000000    ;                 BEQ bypass
00000174: E5E80001    ; carCont         STRB R0,[R8,#1]!                ;STORE: space at word end               (#32)
00000178:             ; bypass          
00000178: E3A00000    ;                 MOV R0,#0
0000017C: E5E80001    ;                 STRB R0,[R8,#1]!                        ;STORE: NULL char at end of string     
                      ; (#0)
00000180: E28BB001    ;                 ADD R11,R11,#1                          ;shift register to correct location for
                      ;  printing               
00000184: E1A0800B    ;                 MOV R8,R11
00000188: E1520006    ;                 CMP R2,R6
0000018C: 0A000000    ;                 BEQ toRead
00000190: E1A0F00E    ;                 MOV PC,R14
00000194:             ; 
00000194: E3A00030    ; toRead          MOV R0,#48      
00000198: EA000011    ;                 B readCond
0000019C:             ; 
0000019C:             ; 
0000019C:             ;                 
0000019C:             ;                 ;READ-----
0000019C:             ; 
0000019C: E3A0000A    ; newline         MOV R0,#10                              ;just print newline without backspace
000001A0: EF000000    ;                 SWI 0
000001A4: E3A02000    ;                 MOV R2,#0
000001A8: E3A03000    ;                 MOV R3,#0
000001AC: EA000010    ;                 B break
000001B0:             ; 
000001B0:             ; finish
000001B0: E1A0800B    ; read            MOV R8,R11
000001B4: E1520005    ;                 CMP R2,R5
000001B8: AA000013    ;                 BGE readGr              
000001BC: E3A00030    ; cont2           MOV R0,#48                              ;set to ASCII 0 for comparison conditio
                      ; nal breaks on #0
000001C0: E28AA001    ;                 ADD R10,R10,#1                          ;counts calls to BL read
000001C4: EA000006    ;                 B readCond                                      ;shift R8=>R11 for next call
000001C8:             ; 
000001C8: E4D80001    ; readLoop        LDRB R0,[R8],#1
000001CC: E3500023    ;                 CMP R0,#35
000001D0: 0AFFFFA4    ;                 BEQ end
000001D4: E3500000    ;                 CMP R0,#0
000001D8: 0A000005    ;                 BEQ break
000001DC:             ;                 ;CMP R0,#10             
000001DC:             ;                 ;BEQ nlSpace
000001DC: EF000000    ;                 SWI 0
000001E0:             ;                         ;ADD R2,R2,#1
000001E0: EAFFFFFF    ;                 B readCond      ;BRANCH
000001E4:             ; 
000001E4:             ; readCond                ;CMP R2,#11
000001E4:             ;                         ;BGE readGr
000001E4: E3500000    ;                 CMP R0,#0                                       ;loop counter against word len
000001E8: 1AFFFFF6    ;                 BNE readLoop
000001EC: E3570001    ;                 CMP R7,#1
000001F0: 0A000002    ;                 BEQ resetLineCount
000001F4: E1520006    ; break           CMP R2,R6
000001F8: AAFFFFE7    ;                 BGE newline
000001FC: EAFFFF92    ;                 B start
00000200:             ; 
00000200: E3A02000    ; resetLineCount  MOV R2,#0
00000204: E3A07000    ;                 MOV R7,#0
00000208: EAFFFF8F    ;                 B start
0000020C:             ;                 
0000020C:             ;                 ;READGR-------
0000020C:             ; 
0000020C:             ; readGr                  ;MOV R0,#10
0000020C:             ;                         ;SWI 0
0000020C: E3570001    ;                 CMP R7,#1
00000210: 0AFFFFFA    ;                 BEQ resetLineCount
00000214: E3530001    ;                 CMP R3,#1                                       ;if more than one word, and gre
                      ; ater than 12 
00000218: CA000016    ;                 BGT delSpaceNl
0000021C: E3A00030    ; cont            MOV R0,#48                              ;set to ASCII 0 for comparison conditio
                      ; nal breaks on #0
00000220: E1A0800B    ;                 MOV R8,R11
00000224: EA00000A    ;                 B readGrCond                            ;shift R8=>R11 for next call
00000228:             ; 
00000228:             ;                 ;CMP R2,#13
00000228:             ;                 ;BEQ newline
00000228: E4D80001    ; readGrLoop      LDRB R0,[R8],#1
0000022C: E3500023    ;                 CMP R0,#35
00000230: 0AFFFF8C    ;                 BEQ end
00000234:             ; 
00000234: E3500020    ;                 CMP R0,#32                                      ;if equal to space, print newli
                      ; ne instead
00000238: 0A000008    ;                 BEQ rGend
0000023C: EF000000    ;                 SWI 0
00000240:             ;                 
00000240: E350000A    ;                 CMP R0,#10
00000244: 0A000000    ;                 BEQ reset
00000248:             ;                 
00000248: EA000001    ;                 B readGrCond                            ;BRANCH
0000024C: E3A02000    ; reset           MOV R2,#0
00000250: EAFFFF7D    ;                 B start
00000254:             ; 
00000254:             ; 
00000254:             ; 
00000254:             ; 
00000254: E3500020    ; readGrCond      CMP R0,#32                              ;if equal to space, print newline
00000258: 1AFFFFF2    ;                 BNE readGrLoop
0000025C: EAFFFF7A    ;                 B start                                         ;BRANCH
00000260:             ; 
00000260:             ; 
00000260: E3A0000A    ; rGend   MOV R0,#10
00000264: EF000000    ;                 SWI 0
00000268: E3A0A000    ;                 MOV R10,#0
0000026C: E3A02000    ;                 MOV R2,#0
00000270: E3A0C000    ;                 MOV R12,#0
00000274: EAFFFF74    ;                 B start
00000278: E1520005    ; delSpaceNl      CMP R2,R5
0000027C: 0AFFFFE6    ;                 BEQ cont
00000280: E3A00008    ;                 MOV R0,#8
00000284: EF000000    ;                 SWI 0
00000288: E3A0000A    ;                 MOV R0,#10
0000028C: EF000000    ;                 SWI 0
00000290: E3A03000    ;                 MOV R3,#0
00000294:             ;         ;for now just set to 0
00000294: E2844001    ;                 ADD R4,R4,#1
00000298: E1A02004    ;                 MOV R2,R4
0000029C:             ; 
0000029C:             ;                                         ;possibly add 1 to account for newline on space
0000029C:             ; 
0000029C: EAFFFFC3    ;                 B read
000002A0:             ;                                         ;need to move word len to line len then branch to read
000002A0:             ;                                         ;may not matter because should print until the NULL cha
                      ; racter  
000002A0:             ; 
000002A0:             ;                 ;HASH------
000002A0:             ; 
000002A0: E1A0C00E    ; hashCq  MOV R12,R14
000002A4: E2422001    ;                 SUB R2,R2,#1
000002A8: E2444001    ;                 SUB R4,R4,#1
000002AC: E3A00000    ;                 MOV R0,#0
000002B0: E5E80001    ;                 STRB R0,[R8,#1]!                        ;STORE: NULL char at end of string     
                      ; (#0)
000002B4: E28BB001    ;                 ADD R11,R11,#1                          ;shift register to correct location for
                      ;  printing               
000002B8: E1A0800B    ;                 MOV R8,R11
000002BC:             ;                 ;SUB R4,R4,#1                           ;subtract 1 to remove space
000002BC:             ; 
000002BC: EBFFFFBB    ;                 BL read
000002C0: E1A0E00C    ;                 MOV R14,R12
000002C4:             ; 
000002C4: EAFFFF67    ;                 B end
000002C8:             ; 
000002C8:             ; 
000002C8:             ; 
000002C8:             ;                 ;RULER-----
000002C8:             ; 
000002C8: E3A00001    ; ruleIn  MOV R0,#1
000002CC: E3A09009    ;                 MOV R9,#9
000002D0: EA000002    ;                 B ruleLp
000002D4:             ; 
000002D4: EF000004    ; rule    SWI 4
000002D8: E2800001    ;                 ADD R0,R0,#1
000002DC: EAFFFFFF    ;                 B ruleLp
000002E0:             ;         
000002E0: E1590000    ; ruleLp  CMP R9,R0
000002E4: AAFFFFFA    ;                 BGE rule
000002E8:             ;                 
000002E8: E3A00000    ;                 MOV R0,#0
000002EC: EF000004    ;                 SWI 4
000002F0: E3A00001    ;                 MOV R0,#1
000002F4: EF000004    ;                 SWI 4
000002F8: E3A00002    ;                 MOV R0,#2
000002FC: EF000004    ;                 SWI 4
00000300: E3A0000A    ;                 MOV R0,#10
00000304: EF000000    ;                 SWI 0
00000308: E3A00000    ;                 MOV R0,#0
0000030C: E3A09000    ;                 MOV R9,#0
00000310: EAFFFF4D    ;                 B start 
00000314:             ; 
00000314: EF000002    ;         SWI 2
00000318:             ; 
00000318:             ; ;rubOut subroutine/function:
00000318:             ; 
00000318: E3500020    ; rubOut  CMP R0,#32
0000031C: 0A000002    ;                 BEQ startRub
00000320: E350000A    ;                 CMP R0,#10
00000324: 0A000000    ;                 BEQ startRub
00000328: E1A0F00E    ;                 MOV PC,R14
0000032C:             ; 
0000032C: E3A00008    ; startRub        MOV R0,#8
00000330: E3A0A000    ;                 MOV R10,#0
00000334: EA000002    ;                 B rubCond
00000338:             ; 
00000338: EF000000    ; rubLoop SWI 0
0000033C: E28AA001    ;                 ADD R10,R10,#1
00000340: EAFFFFFF    ;                 B rubCond
00000344:             ; 
00000344: E15A000C    ; rubCond CMP R10,R12
00000348: BAFFFFFA    ;                 BLT rubLoop
0000034C:             ; 
0000034C: E1A0000A    ;                 MOV R0,R10
00000350: E1A0F00E    ;                 MOV PC,R14              
00000354:             ; 
00000354:             ; ;erroneous code
00000354:             ; ;code for call
00000354:             ; ;               MOV R13,R14
00000354:             ; ;               BL rubOut
00000354:             ; ;               MOV R4,R13

Symbol Table: Labels
: width                             00000004  Local -- ARM
: buffer                            00000008  Local -- ARM
: main                              0000002C  Local -- ARM
: start                             0000004C  Local -- ARM
: end                               00000068  Local -- ARM
: carReset                          0000006C  Local -- ARM
: bsCheck                           00000078  Local -- ARM
: bsCheckCont                       00000084  Local -- ARM
: multiCheck                        00000090  Local -- ARM
: inStore                           000000A4  Local -- ARM
: noMulti                           000000B4  Local -- ARM
: loopStore                         000000B4  Local -- ARM
: bypMulti                          000000C4  Local -- ARM
: resetR12                          000000D4  Local -- ARM
: backSub                           000000DC  Local -- ARM
: res                               000000E8  Local -- ARM
: storeCond                         000000F0  Local -- ARM
: subCont                           00000108  Local -- ARM
: R2cont                            00000124  Local -- ARM
: resCont                           00000130  Local -- ARM
: bsCont                            0000013C  Local -- ARM
: carCont                           00000174  Local -- ARM
: bypass                            00000178  Local -- ARM
: toRead                            00000194  Local -- ARM
: newline                           0000019C  Local -- ARM
: finish                            000001B0  Local -- ARM
: read                              000001B0  Local -- ARM
: cont2                             000001BC  Local -- ARM
: readLoop                          000001C8  Local -- ARM
: readCond                          000001E4  Local -- ARM
: break                             000001F4  Local -- ARM
: resetLineCount                    00000200  Local -- ARM
: readGr                            0000020C  Local -- ARM
: cont                              0000021C  Local -- ARM
: readGrLoop                        00000228  Local -- ARM
: reset                             0000024C  Local -- ARM
: readGrCond                        00000254  Local -- ARM
: rGend                             00000260  Local -- ARM
: delSpaceNl                        00000278  Local -- ARM
: hashCq                            000002A0  Local -- ARM
: ruleIn                            000002C8  Local -- ARM
: rule                              000002D4  Local -- ARM
: ruleLp                            000002E0  Local -- ARM
: rubOut                            00000318  Local -- ARM
: startRub                          0000032C  Local -- ARM
: rubLoop                           00000338  Local -- ARM
: rubCond                           00000344  Local -- ARM
